{"version":3,"sources":["components/Common/Loaders.jsx","redux/constants/places.js","services/api.js","redux/methods/index.js","redux/actions/places.js","services/places-api.js","containers/Formy.tsx","App.tsx","redux/reducers/places.ts","redux/reducers/index.ts","redux/store.js","reportWebVitals.ts","index.tsx","styles/App.module.scss"],"names":["useStyles","makeStyles","theme","root","width","marginTop","spacing","paddingTop","CircularLoader","props","classes","Typography","align","className","component","CircularProgress","color","size","thickness","disableShrink","ACTIONS","API_ENDPOINT","window","location","origin","api","axios","create","baseURL","ActionCreatorFactory","type","payload","fetchPlacesErrorAction","error","getPlaces","params","dispatch","get","fetchPlacesService","then","response","status","data","catch","PlaceView","lazy","padding","margin","titleTypo","textField","notchedOutline","borderWidth","borderColor","resultsCountTypo","connector","connect","state","placesState","places","searchPlaces","isLoading","isLoaded","isError","count","useState","query","setQuery","useDebounce","debouncedQuery","reqTime","setReqTime","responseTime","setResponseTime","useEffect","q","Date","getTime","resTime","Grid","container","item","xs","Box","display","alignItems","justifyContent","TextField","variant","InputProps","placeholder","value","onChange","e","target","Fragment","Suspense","fallback","map","place","place_id","App","createTheme","palette","contrastThreshold","tonalOffset","typography","fontSize","fontFamily","CssBaseline","styles","INITIAL_STATE","rootReducer","combineReducers","action","results","length","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","logger","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.d03ae4d8.chunk.js","sourcesContent":["import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n    paddingTop: theme.spacing(1),\n  },\n}));\n\nexport function CircularLoader(props) {\n  const classes = useStyles();\n\n  return (\n    <Typography \n      align={props.align || \"center\"}\n      className={classes.root} component=\"div\">\n      <CircularProgress \n        color=\"secondary\" \n        size={30} \n        thickness={5} \n        disableShrink/>\n    </Typography>\n  );\n}\n","\nexport const FETCH_PLACES = 'FETCH_PLACES';\nexport const FETCH_PLACES_SUCCESS = 'FETCH_PLACES_SUCCESS';\nexport const FETCH_PLACES_FAILURE = 'FETCH_PLACES_FAILURE';\nexport const RESET_STATE = 'RESET_STATE';\n\n\nexport const ACTIONS = {\n\tFETCH_PLACES,\n\tFETCH_PLACES_SUCCESS,\n\tFETCH_PLACES_FAILURE,\n\tRESET_STATE,\n};","import axios from 'axios';\n\n\n// window origin - base url\nconst API_ENDPOINT = `${window.location.origin}/api`;\n\nconst api = axios.create({\n    baseURL: API_ENDPOINT,\n});\n\n\nexport default api;","export const ActionCreatorFactory = (type, payload=null) => {\n\treturn {\n\t\ttype: type,\n\t\tpayload: payload\n\t}\n}\n","import { ACTIONS } from '../constants/places';\nimport { fetchPlacesService } from '../../services/places-api';\nimport { ActionCreatorFactory } from '../methods';\n\n\nconst fetchPlacesAction = () => ActionCreatorFactory(ACTIONS.FETCH_PLACES);\nconst fetchPlacesSuccessAction = data => ActionCreatorFactory(ACTIONS.FETCH_PLACES_SUCCESS, data);\nconst fetchPlacesErrorAction = error => ActionCreatorFactory(ACTIONS.FETCH_PLACES_FAILURE, error);\n\nexport function getPlaces(params) {\n\treturn (dispatch) => {\n\t\tdispatch(fetchPlacesAction());\n\t\tfetchPlacesService(params)\n\t\t.then((response) => {\n\t\t\tif (response.status !== 200) {\n\t\t\t\tdispatch(fetchPlacesErrorAction(response));\n\t\t\t}\n\t\t\treturn response;\n\t\t})\n\t\t.then((response) => {\n\t\t\tdispatch(fetchPlacesSuccessAction(response.data))\n\t\t})\n\t\t.catch((error) => {\n\t\t\tdispatch(fetchPlacesErrorAction(error));\n\t\t})\n\t};\n}\n","import api from './api';\n\nexport const fetchPlacesService = (params) => \n    api.get('/places', {\n        params: params\n    });","import React, { lazy, useState, useEffect } from 'react';\nimport { Grid, Box, Typography, TextField, makeStyles } from '@material-ui/core';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useDebounce } from 'use-debounce';\nimport { CircularLoader } from \"../components/Common/Loaders\";\nimport { getPlaces } from \"../redux/actions/places\";\nimport { PlaceObjectProps } from \"../types/places\";\n\n// we use lazy loading to load out PlaceView component\nconst PlaceView = lazy(() => import('../components/PlaceView'));\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n    titleTypo: {\n        padding: theme.spacing(1)\n    },\n    textField: {\n        width: \"350px\",\n    },\n    notchedOutline: {\n        borderWidth: \"1px\",\n        borderColor: \"grey !important\"\n    },\n    resultsCountTypo: {\n        padding: theme.spacing(2),\n    }\n}))\n\nconst mapStateToProps = (state: any) => {\n    return {\n      placesState: state.places,\n    };\n  };\n  \n  const mapDispatchToProps = (dispatch: any) => {\n    return {\n        searchPlaces: (params: object) => dispatch(getPlaces(params))\n    };\n  };\n  \n  const connector = connect(mapStateToProps, mapDispatchToProps);\n  // we use ConnectedProps to infere types from redux state\n  type FormyProps = ConnectedProps<typeof connector>;\n\nconst Formy: React.FC<FormyProps> = (props) => {\n\n    const { searchPlaces, placesState } = props;\n    const { isLoading, isLoaded, isError, places, count, error } = placesState;\n    const classes = useStyles();\n    const [query, setQuery] = useState<string>('');\n    const [debouncedQuery] = useDebounce(query, 1000);\n    const [reqTime, setReqTime] = useState<number>(0);\n    const [responseTime, setResponseTime] = useState<number>(0);\n\n    useEffect(() => {\n        if(debouncedQuery !== '') {\n            searchPlaces({q: debouncedQuery});\n        }\n    }, [debouncedQuery, searchPlaces])\n\n    useEffect(() => {\n        if(isLoading) {\n            const reqTime = (new Date()).getTime();\n            setReqTime(reqTime);\n        }\n        if(isLoaded) {\n            const resTime = (new Date()).getTime();\n            const milliseconds = resTime - reqTime;\n            setResponseTime(milliseconds);\n        }\n    }, [isLoading, isLoaded, reqTime])\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Box display=\"flex\" \n                        alignItems=\"center\"\n                        justifyContent=\"center\">\n                        <TextField type=\"text\" \n                            variant=\"outlined\" \n                            className={classes.textField}\n                            InputProps={{\n                                classes: {\n                                  notchedOutline: classes.notchedOutline\n                                }\n                              }}\n                            placeholder=\"Start typing to search...\"\n                            value={query} \n                            onChange={e => setQuery(e.target.value)} />\n                    </Box>\n                </Grid>\n                {isLoading\n                    &&\n                    (\n                        <Grid item xs={12}>\n                            <CircularLoader />\n                        </Grid>\n                    )\n\n                }\n                {isLoaded &&\n                    !!count\n                    // count = places array is not empty: we have results\n                    ?\n                    (\n                        <React.Fragment>\n                            <Typography variant=\"body1\" \n                                className={classes.resultsCountTypo}>\n                               About {count} results ({responseTime} ms)\n                            </Typography>\n                            <React.Suspense\n                                fallback=\"Please wait while we load a place for your data...\"\n                            >\n                                {places.map((place: PlaceObjectProps) => {\n                                    return (\n                                        <PlaceView key={place.place_id} place={place} />\n                                    )})\n                                }\n                            </React.Suspense>\n                        </React.Fragment>\n                    ):\n                    // count: places array is empty: no results\n                    // we only display that there are no results only if \n                    // we are not awaiting any responses\n                    !isLoading &&\n                        (\n                            <Grid item xs={12}>\n                                <Typography variant=\"h6\"\n                                    component=\"h2\"\n                                    align=\"center\"\n                                    className={classes.titleTypo}\n                                >\n                                    No results for {query}\n                                </Typography>\n                                <Typography\n                                    align=\"center\"\n                                >\n                                    {error}\n                                </Typography>\n                            </Grid>\n                        )\n                }\n                {/* \n                    // we only dispaly an error when:\n                        - isError is true\n                        - and isLoading is false\n                */}\n                {(!isLoading && isError) &&\n                    (\n                        <Grid item xs={12}>\n                            <Typography variant=\"h6\"\n                                component=\"h2\"\n                                align=\"center\"\n                                className={classes.titleTypo}\n                            >\n                                Something went wrong\n                            </Typography>\n                            <Typography\n                                align=\"center\"\n                            >\n                                {error}\n                            </Typography>\n                        </Grid>\n                    )\n                }\n            </Grid>\n        </div>\n    )\n}\n\nexport default connector(Formy);","import React from 'react';\nimport Formy from './containers/Formy';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport { Grid, Typography, CssBaseline } from '@material-ui/core';\nimport styles from \"./styles/App.module.scss\";\n\n\nconst App: React.FC<any> = (props) => {\n\n  const theme = createTheme({\n    palette: {\n      type: 'light',\n      contrastThreshold: 3,\n      tonalOffset: 0.2,\n    },\n    typography: {\n      fontSize: 14,\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    },\n  })\n\n  return (\n    <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Grid component=\"main\" className={styles.root} container spacing={2}>\n            <Grid item xs={6}>\n                <Typography variant=\"h5\"\n                    component=\"h1\"\n                    className={styles.titleTypo}\n                >\n                    Formy\n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <Typography variant=\"h5\"\n                    align=\"right\"\n                    component=\"h1\"\n                    className={styles.titleTypo}\n                >\n                    A simple place search API\n                </Typography>\n            </Grid>\n        </Grid>\n        <Formy />\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { Reducer } from \"redux\";\nimport IAction from \"../types\";\nimport { ACTIONS } from '../constants/places';\nimport AppState from \"./AppState\";\n\n\nconst INITIAL_STATE: AppState = {\n\tplaces: [],\n\tcount: 0,\n\tisLoading: false,\n\tisLoaded: false,\n\tisError: false,\n};\n\n\nexport const places: Reducer<AppState> = (\n\tstate: AppState = INITIAL_STATE,\n\taction: IAction\n  ): AppState => {\n\n\tswitch (action.type) {\n\t\tcase ACTIONS.FETCH_PLACES: {\n\t\t\treturn {...INITIAL_STATE, \n\t\t\t\t\t\tisLoading: true,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\tcase ACTIONS.FETCH_PLACES_SUCCESS: {\n\t\t\tconst { results } = action.payload;\n\t\t\treturn {\n\t\t\t\t\tplaces: results,\n\t\t\t\t\tcount: results.length,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tisLoaded: true, \n\t\t\t\t}\n\t\t\t}\n\t\tcase ACTIONS.FETCH_PLACES_FAILURE: {\n\t\t\treturn {...state, \n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tisLoaded: true, \n\t\t\t\t\tisError: true,\n\t\t\t\t}\n\t\t\t}\n\t\tcase ACTIONS.RESET_STATE: {\n\t\t\treturn INITIAL_STATE;\n\t\t}\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from 'redux';\nimport { places } from './places';\n\nconst rootReducer = combineReducers({ places });\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, \n\tcomposeEnhancer(applyMiddleware(thunk, logger)));\n\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\trootElement);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__BZeGF\",\"titleTypo\":\"App_titleTypo__1CgyL\"};"],"sourceRoot":""}